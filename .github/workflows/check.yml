name: Check

on:
  push:
    branches:
      - main
    paths:
      - 'include/**'
      - 'lib/**'
      - 'spec/**'
      - 'src/**'
      - '**.rockspec'
      - '.clang-format'
      - '.clang-tidy'
      - 'docker-compose.yml'

  pull_request:
    branches:
      - main
    paths:
      - 'include/**'
      - 'lib/**'
      - 'spec/**'
      - 'src/**'
      - '**.rockspec'
      - '.clang-format'
      - '.clang-tidy'
      - 'docker-compose.yml'

  workflow_dispatch:
  workflow_call:

jobs:
  lint:
    name: Lint

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Run clang-format on C files and headers
        run: |
          IFS=$' \n\t'; set -ux
          
          # "notify" me of newer clang-format version
          if command -v clang-format-19 &> /dev/null; then
            echo 'clang-format-19 is available'
            exit 2
          fi

          shopt -s nullglob
          files=(src/*.c src/**/*.c include/*.h include/**/*.h)
          if [[ "${#files[@]}" -eq 0 ]]; then
            echo 'No files found'
            exit 1
          fi
          clang-format-18 --verbose --dry-run --Werror "${files[@]}"

      - name: Run clang-tidy on C files and headers
        run: |
          IFS=$' \n\t'; set -ux
          
          # "notify" me of newer clang-tidy version
          if command -v clang-tidy-19 &> /dev/null; then
            echo 'clang-tidy-19 is available'
            exit 2
          fi
          
          # get required header files
          sudo apt-get install --yes --no-install-recommends \
            libx11-dev \
            liblua5.1-dev \
            liblua5.2-dev \
            liblua5.3-dev \
            liblua5.4-dev \
            libluajit-5.1-dev

          shopt -s nullglob
          files=(src/*.c src/**/*.c include/*.h include/**/*.h)
          if [[ "${#files[@]}" -eq 0 ]]; then
            echo 'No files found'
            exit 1
          fi
          clang-tidy-18 --warnings-as-errors='*' --extra-arg='-I/usr/include/lua5.1' "${files[@]}"
          clang-tidy-18 --warnings-as-errors='*' --extra-arg='-I/usr/include/lua5.2' "${files[@]}"
          clang-tidy-18 --warnings-as-errors='*' --extra-arg='-I/usr/include/lua5.3' "${files[@]}"
          clang-tidy-18 --warnings-as-errors='*' --extra-arg='-I/usr/include/lua5.4' "${files[@]}"
          clang-tidy-18 --warnings-as-errors='*' --extra-arg='-I/usr/include/luajit-2.1' "${files[@]}"

      - name: Set up Lua
        uses: luarocks/gh-actions-lua@master

      - name: Set up LuaRocks
        uses: luarocks/gh-actions-luarocks@master

      - name: Run luacheck on rockspecs and tests
        env:
          # renovate: datasource=github-releases depName=ammaraskar/msvc-problem-matcher
          MSCV_PROBLEM_MATCHER_VERSION: 0.3.0
        run: |
          IFS=$' \n\t'; set -ux

          # install luacheck
          luarocks install luacheck

          # download and setup problem matcher for luacheck's visual_studio formatter
          wget -q "https://raw.githubusercontent.com/ammaraskar/msvc-problem-matcher/${MSCV_PROBLEM_MATCHER_VERSION}/msvc_matcher.json" \
            -O visual-studio-problem-matcher.json
          echo '::add-matcher::visual-studio-problem-matcher.json'

          # run luacheck
          luacheck . --no-cache --formatter visual_studio --include-files 'spec/**/*.lua' '**/*.rockspec' --exclude-files .lua .luarocks


  test:
    name: Test
    needs: lint

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        lua_version: [ '5.1', '5.2', '5.3', '5.4', 'luajit-2.0', 'luajit-2.1' ]
        exclude:
          # Currently does not work for LuaJIT on Windows (Lua library not found)
          - os: windows-latest
            lua_version: 'luajit-2.0'
          - os: windows-latest
            lua_version: 'luajit-2.1'
          # Currently does not work for LuaJIT 2.0 on macOS (Architecture not supported)
          - os: macos-latest
            lua_version: 'luajit-2.0'
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Microsoft Visual C++ Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0
        # Will be ignored on non-Windows platforms anyway, but it's better to just skip it
        if: matrix.os == 'windows-latest'

      - name: Set up X11
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install --yes --no-install-recommends libx11-dev

      - name: Set up Lua
        uses: luarocks/gh-actions-lua@master
        with:
          luaVersion: ${{ matrix.lua_version }}

      - name: Set up LuaRocks
        uses: luarocks/gh-actions-luarocks@master

      - name: Build fenster
        run: luarocks make

      - name: Run tests
        run: luarocks test -- --exclude-tags needsdisplay --verbose --output TAP


  test-docker:
    name: Test (docker)
    needs: lint

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Run Tests in Docker
        env:
          EXCLUDE_TAGS: needsdisplay
          # renovate: datasource=github-releases depName=docker/compose
          COMPOSE_VERSION: v2.34.0
        run: |
          IFS=$' \n\t'; set -ux

          # Download newest version of Docker Compose plugin.
          compose_plugin_path="$(docker info --format='{{range .ClientInfo.Plugins}}{{if eq .Name "compose"}}{{.Path}}{{break}}{{end}}{{end}}')"
          sudo wget -q "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-linux-x86_64" \
            -O "${compose_plugin_path}"
          docker compose version
          
          # Run docker compose
          docker compose up --abort-on-container-failure --yes --quiet-pull
